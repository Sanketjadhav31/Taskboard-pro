{"ast":null,"code":"import _objectSpread from\"C:/Users/DELL/OneDrive/Desktop/collabeaseproject/collabeasesorce/collabease/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useState,useRef,useEffect,useContext,useCallback}from'react';import{io}from'socket.io-client';import axios from'axios';import{AuthContext}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";export const ChatContext=/*#__PURE__*/createContext();export const ChatProvider=_ref=>{let{children}=_ref;const{user,isAuthenticated}=useContext(AuthContext);const[messages,setMessages]=useState({});const[activeChat,setActiveChat]=useState(null);const[unreadCounts,setUnreadCounts]=useState({});const[onlineUsers,setOnlineUsers]=useState([]);const[connectionStatus,setConnectionStatus]=useState('disconnected');const socketRef=useRef(null);const[error,setError]=useState('');const reconnectTimerRef=useRef(null);const reconnectAttemptRef=useRef(0);const MAX_RECONNECT_ATTEMPTS=10;// Connect to socket when user is authenticated\nuseEffect(()=>{if(isAuthenticated&&user!==null&&user!==void 0&&user._id){connectSocket();}return()=>{cleanupReconnectTimer();disconnectSocket();};},[isAuthenticated,user]);// Cleanup reconnect timer\nconst cleanupReconnectTimer=useCallback(()=>{if(reconnectTimerRef.current){clearTimeout(reconnectTimerRef.current);reconnectTimerRef.current=null;}},[]);// Manual reconnection logic\nconst reconnect=useCallback(()=>{console.log('Manual reconnection attempt');cleanupReconnectTimer();reconnectAttemptRef.current=0;connectSocket();},[cleanupReconnectTimer]);// Schedule automatic reconnection with exponential backoff\nconst scheduleReconnect=useCallback(()=>{cleanupReconnectTimer();if(reconnectAttemptRef.current>=MAX_RECONNECT_ATTEMPTS){console.log('Maximum reconnection attempts reached');setConnectionStatus('error');setError('Connection failed after multiple attempts. Please try refreshing the page or check your network connection.');return;}reconnectAttemptRef.current+=1;const delay=Math.min(1000*2**reconnectAttemptRef.current,30000);// Max 30 seconds\nconsole.log(\"Scheduling reconnect attempt \".concat(reconnectAttemptRef.current,\" in \").concat(delay,\"ms\"));setConnectionStatus('disconnected');reconnectTimerRef.current=setTimeout(()=>{console.log(\"Executing scheduled reconnect attempt \".concat(reconnectAttemptRef.current));connectSocket();},delay);},[cleanupReconnectTimer]);// Connect socket\nconst connectSocket=useCallback(()=>{try{// First, cleanup any existing socket\nif(socketRef.current){socketRef.current.disconnect();socketRef.current=null;}setConnectionStatus('connecting');// Fix: Use the correct backend API URL with port 5000 instead of frontend port\nconst apiUrl='http://localhost:5000';// Backend server runs on port 5000\nconsole.log('Connecting to socket at:',apiUrl);// Fix: More robust socket configuration with increased timeout\nconst socket=io(apiUrl,{reconnection:true,reconnectionAttempts:10,reconnectionDelay:1000,reconnectionDelayMax:5000,timeout:60000,// Increased timeout to 60 seconds\ntransports:['websocket','polling'],withCredentials:true,forceNew:true,auth:{token:localStorage.getItem('token')},autoConnect:true// Ensure auto-connection is enabled\n});socketRef.current=socket;// Connection event handlers\nsocket.on('connect',()=>{console.log('Socket connected successfully:',socket.id);reconnectAttemptRef.current=0;setConnectionStatus('connected');setError('');// Authenticate socket connection\nif(user){socket.emit('authenticate',{userId:user._id});console.log('Authentication sent for user:',user._id);}});socket.on('connect_error',err=>{console.error('Socket connection error:',err);setConnectionStatus('error');// Special handling for timeout errors\nif(err.message==='timeout'){setError(\"Connection timed out. Server may be down or unreachable. Reconnecting...\");console.log('Timeout detected, attempting immediate reconnect...');// Reset reconnect attempts for timeouts to give more chances\nreconnectAttemptRef.current=Math.max(0,reconnectAttemptRef.current-2);}else{setError(\"Connection error: \".concat(err.message,\". Reconnecting...\"));}scheduleReconnect();});socket.on('disconnect',reason=>{console.log('Socket disconnected. Reason:',reason);// If the server closed the connection, we should attempt reconnect\nif(reason==='io server disconnect'||reason==='transport close'){setConnectionStatus('disconnected');scheduleReconnect();}else{// For other cases, socket.io will try to reconnect automatically\nsetConnectionStatus('disconnected');}});socket.on('reconnect',attempt=>{console.log(\"Socket reconnected after \".concat(attempt,\" attempts\"));reconnectAttemptRef.current=0;setConnectionStatus('connected');setError('');// Re-authenticate after reconnection\nif(user){socket.emit('authenticate',{userId:user._id});// Rejoin active chat if any\nif(activeChat){socket.emit('join:project',activeChat);}}});socket.on('reconnect_error',err=>{console.error('Socket reconnection error:',err);setError(\"Reconnection error: \".concat(err.message,\". Retrying...\"));scheduleReconnect();});socket.on('reconnect_failed',()=>{console.log('Socket reconnection failed');setConnectionStatus('error');setError('Connection failed. Please use the reconnect button or refresh the page.');});socket.on('error',err=>{console.error('Socket error:',err);setError(\"Socket error: \".concat(err.message||'Unknown error'));});// Listen for online users updates\nsocket.on('users:online',users=>{console.log('Online users updated:',users);setOnlineUsers(users);});// Listen for new messages\nsocket.on('chat:message',message=>{var _message$userId;console.log('Received message:',message);setMessages(prevMessages=>{const chatId=message.projectId;const updatedMessages=_objectSpread({},prevMessages);if(!updatedMessages[chatId]){updatedMessages[chatId]=[];}// Check if message already exists (avoid duplicates)\nconst messageExists=updatedMessages[chatId].some(m=>m._id===message._id);if(!messageExists){// Ensure the userId field is properly structured\nconst safeMessage=_objectSpread(_objectSpread({},message),{},{userId:message.userId&&typeof message.userId==='object'?message.userId:{_id:message.userId||(user===null||user===void 0?void 0:user._id),displayName:message.userName||'Unknown User',photo:message.userAvatar||null}});updatedMessages[chatId]=[...updatedMessages[chatId],safeMessage];}return updatedMessages;});// Update unread count if message is not from current user and not in active chat\nif(((_message$userId=message.userId)===null||_message$userId===void 0?void 0:_message$userId._id)!==(user===null||user===void 0?void 0:user._id)&&activeChat!==message.projectId){setUnreadCounts(prev=>_objectSpread(_objectSpread({},prev),{},{[message.projectId]:(prev[message.projectId]||0)+1}));}});// Listen for message deletions\nsocket.on('chat:message:delete',_ref2=>{let{messageId,projectId}=_ref2;setMessages(prevMessages=>{const updatedMessages=_objectSpread({},prevMessages);if(updatedMessages[projectId]){updatedMessages[projectId]=updatedMessages[projectId].filter(m=>m._id!==messageId);}return updatedMessages;});});}catch(err){console.error('Error setting up socket connection:',err);setConnectionStatus('error');setError('Failed to establish connection. Please try reconnecting.');scheduleReconnect();}},[user,activeChat,scheduleReconnect]);// Disconnect socket\nconst disconnectSocket=useCallback(()=>{const socket=socketRef.current;if(socket){console.log('Cleaning up socket connection');// Remove all event listeners\nsocket.off('connect');socket.off('connect_error');socket.off('disconnect');socket.off('reconnect');socket.off('reconnect_error');socket.off('reconnect_failed');socket.off('error');socket.off('chat:message');socket.off('chat:message:delete');socket.off('users:online');// Leave active chat room if any\nif(activeChat){socket.emit('leave:project',activeChat);}// Disconnect socket\nsocket.disconnect();socketRef.current=null;}},[activeChat]);// Join a chat room\nconst joinChatRoom=useCallback(chatId=>{const socket=socketRef.current;if(socket&&chatId){console.log('Joining chat room:',chatId);socket.emit('join:project',chatId);setActiveChat(chatId);// Reset unread count for this chat\nsetUnreadCounts(prev=>_objectSpread(_objectSpread({},prev),{},{[chatId]:0}));}else if(!socket&&chatId){// If no socket but trying to join a room, attempt reconnection\nconsole.log('No active socket when trying to join room. Attempting reconnect...');setActiveChat(chatId);// Set activeChat first so it can be rejoined after connection\nreconnect();}},[reconnect]);// Leave a chat room\nconst leaveChatRoom=useCallback(chatId=>{const socket=socketRef.current;if(socket&&chatId){// Only leave the room if it's actually valid\nif(typeof chatId==='string'&&chatId.trim()!==''){console.log('Leaving chat room:',chatId);socket.emit('leave:project',chatId);if(activeChat===chatId){setActiveChat(null);}}}},[activeChat]);// Fetch messages for a specific chat\nconst fetchMessages=useCallback(async chatId=>{try{setError('');// If we already have messages for this chat, don't fetch again\nif(messages[chatId]&&messages[chatId].length>0){return messages[chatId];}const token=localStorage.getItem('token');if(!token){setError('Authentication required. Please log in again.');return[];}const res=await axios.get(\"/api/chat/\".concat(chatId,\"/messages\"),{headers:{'Authorization':\"Bearer \".concat(token)},timeout:10000// 10 seconds timeout\n});if(Array.isArray(res.data)){setMessages(prev=>_objectSpread(_objectSpread({},prev),{},{[chatId]:res.data}));return res.data;}else{console.error('Unexpected message format:',res.data);return[];}}catch(err){console.error('Error fetching messages:',err);if(err.code==='ECONNABORTED'){setError('Request timed out. Please check your connection and try again.');}else if(err.response){setError(\"Failed to load messages: \".concat(err.response.data.message||err.response.statusText));}else if(err.request){setError('Network error. Please check your connection and try again.');}else{setError('Failed to load messages. Please try again.');}return[];}},[messages]);// Send a message\nconst sendMessage=useCallback(async(chatId,messageText)=>{try{setError('');if(!messageText||messageText.trim()===''){return false;}const token=localStorage.getItem('token');if(!token){setError('Authentication required. Please log in again.');return false;}// Create optimistic message\nconst optimisticMessage={_id:\"temp-\".concat(Date.now()),projectId:chatId,userId:{_id:user._id,displayName:user.displayName,photo:user.photo},message:messageText,createdAt:new Date().toISOString(),isOptimistic:true};// Add to messages immediately\nsetMessages(prev=>{const updatedMessages=_objectSpread({},prev);if(!updatedMessages[chatId]){updatedMessages[chatId]=[];}updatedMessages[chatId]=[...updatedMessages[chatId],optimisticMessage];return updatedMessages;});// Send to server\nconst response=await axios.post(\"/api/chat/\".concat(chatId,\"/messages\"),{message:messageText,attachments:[]},{headers:{'Authorization':\"Bearer \".concat(token),'Content-Type':'application/json'},timeout:10000});// If successful, remove optimistic message\nif(response.status===201||response.status===200){setMessages(prev=>{const updatedMessages=_objectSpread({},prev);if(updatedMessages[chatId]){updatedMessages[chatId]=updatedMessages[chatId].filter(m=>m._id!==optimisticMessage._id);}return updatedMessages;});// The real message will be added via socket.io\nreturn true;}return false;}catch(err){console.error('Error sending message:',err);// Remove optimistic message on error\nsetMessages(prev=>{const updatedMessages=_objectSpread({},prev);if(updatedMessages[chatId]){updatedMessages[chatId]=updatedMessages[chatId].filter(m=>!m.isOptimistic);}return updatedMessages;});if(err.response){setError(\"Failed to send message: \".concat(err.response.data.message||err.response.statusText));}else if(err.request){setError('Network error. Please check your connection and try again.');}else{setError('Failed to send message. Please try again.');}return false;}},[user]);// Delete a message\nconst deleteMessage=useCallback(async(chatId,messageId)=>{try{var _messages$chatId;const token=localStorage.getItem('token');if(!token){setError('Authentication required. Please log in again.');return false;}// Find the message before trying to delete it\nconst msgToDelete=(_messages$chatId=messages[chatId])===null||_messages$chatId===void 0?void 0:_messages$chatId.find(m=>m._id===messageId);if(!msgToDelete){setError('Message not found');return false;}// Optimistically remove message\nsetMessages(prev=>{const updatedMessages=_objectSpread({},prev);if(updatedMessages[chatId]){updatedMessages[chatId]=updatedMessages[chatId].filter(m=>m._id!==messageId);}return updatedMessages;});await axios.delete(\"/api/chat/\".concat(chatId,\"/messages/\").concat(messageId),{headers:{'Authorization':\"Bearer \".concat(token)}});return true;}catch(err){console.error('Error deleting message:',err);// Add the message back if deletion failed\nsetMessages(prev=>{var _messages$chatId2;const updatedMessages=_objectSpread({},prev);const msgToDelete=(_messages$chatId2=messages[chatId])===null||_messages$chatId2===void 0?void 0:_messages$chatId2.find(m=>m._id===messageId);if(updatedMessages[chatId]&&msgToDelete){updatedMessages[chatId]=[...updatedMessages[chatId],msgToDelete].sort((a,b)=>new Date(a.createdAt)-new Date(b.createdAt));}return updatedMessages;});setError('Failed to delete message. Please try again.');return false;}},[messages]);// Total unread count\nconst totalUnreadCount=Object.values(unreadCounts).reduce((sum,count)=>sum+count,0);// Get chat messages\nconst getChatMessages=useCallback(chatId=>{return messages[chatId]||[];},[messages]);// Mark chat as read\nconst markChatAsRead=useCallback(chatId=>{setUnreadCounts(prev=>_objectSpread(_objectSpread({},prev),{},{[chatId]:0}));},[]);return/*#__PURE__*/_jsx(ChatContext.Provider,{value:{messages,activeChat,connectionStatus,error,onlineUsers,unreadCounts,totalUnreadCount,getChatMessages,joinChatRoom,leaveChatRoom,sendMessage:user?sendMessage:()=>Promise.reject('User not authenticated'),deleteMessage,fetchMessages,markChatAsRead,isOnline:userId=>onlineUsers.includes(userId),reconnect// Exposing manual reconnect function\n},children:children});};export default ChatProvider;","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useCallback","io","axios","AuthContext","jsx","_jsx","ChatContext","ChatProvider","_ref","children","user","isAuthenticated","messages","setMessages","activeChat","setActiveChat","unreadCounts","setUnreadCounts","onlineUsers","setOnlineUsers","connectionStatus","setConnectionStatus","socketRef","error","setError","reconnectTimerRef","reconnectAttemptRef","MAX_RECONNECT_ATTEMPTS","_id","connectSocket","cleanupReconnectTimer","disconnectSocket","current","clearTimeout","reconnect","console","log","scheduleReconnect","delay","Math","min","concat","setTimeout","disconnect","apiUrl","socket","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","transports","withCredentials","forceNew","auth","token","localStorage","getItem","autoConnect","on","id","emit","userId","err","message","max","reason","attempt","users","_message$userId","prevMessages","chatId","projectId","updatedMessages","_objectSpread","messageExists","some","m","safeMessage","displayName","userName","photo","userAvatar","prev","_ref2","messageId","filter","off","joinChatRoom","leaveChatRoom","trim","fetchMessages","length","res","get","headers","Array","isArray","data","code","response","statusText","request","sendMessage","messageText","optimisticMessage","Date","now","createdAt","toISOString","isOptimistic","post","attachments","status","deleteMessage","_messages$chatId","msgToDelete","find","delete","_messages$chatId2","sort","a","b","totalUnreadCount","Object","values","reduce","sum","count","getChatMessages","markChatAsRead","Provider","value","Promise","reject","isOnline","includes"],"sources":["C:/Users/DELL/OneDrive/Desktop/collabeaseproject/collabeasesorce/collabease/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext, useCallback } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport { AuthContext } from './AuthContext';\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { user, isAuthenticated } = useContext(AuthContext);\r\n  const [messages, setMessages] = useState({});\r\n  const [activeChat, setActiveChat] = useState(null);\r\n  const [unreadCounts, setUnreadCounts] = useState({});\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const socketRef = useRef(null);\r\n  const [error, setError] = useState('');\r\n  const reconnectTimerRef = useRef(null);\r\n  const reconnectAttemptRef = useRef(0);\r\n  const MAX_RECONNECT_ATTEMPTS = 10;\r\n  \r\n  // Connect to socket when user is authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated && user?._id) {\r\n      connectSocket();\r\n    }\r\n    \r\n    return () => {\r\n      cleanupReconnectTimer();\r\n      disconnectSocket();\r\n    };\r\n  }, [isAuthenticated, user]);\r\n  \r\n  // Cleanup reconnect timer\r\n  const cleanupReconnectTimer = useCallback(() => {\r\n    if (reconnectTimerRef.current) {\r\n      clearTimeout(reconnectTimerRef.current);\r\n      reconnectTimerRef.current = null;\r\n    }\r\n  }, []);\r\n  \r\n  // Manual reconnection logic\r\n  const reconnect = useCallback(() => {\r\n    console.log('Manual reconnection attempt');\r\n    cleanupReconnectTimer();\r\n    reconnectAttemptRef.current = 0;\r\n    connectSocket();\r\n  }, [cleanupReconnectTimer]);\r\n  \r\n  // Schedule automatic reconnection with exponential backoff\r\n  const scheduleReconnect = useCallback(() => {\r\n    cleanupReconnectTimer();\r\n    \r\n    if (reconnectAttemptRef.current >= MAX_RECONNECT_ATTEMPTS) {\r\n      console.log('Maximum reconnection attempts reached');\r\n      setConnectionStatus('error');\r\n      setError('Connection failed after multiple attempts. Please try refreshing the page or check your network connection.');\r\n      return;\r\n    }\r\n    \r\n    reconnectAttemptRef.current += 1;\r\n    const delay = Math.min(1000 * (2 ** reconnectAttemptRef.current), 30000); // Max 30 seconds\r\n    \r\n    console.log(`Scheduling reconnect attempt ${reconnectAttemptRef.current} in ${delay}ms`);\r\n    setConnectionStatus('disconnected');\r\n    \r\n    reconnectTimerRef.current = setTimeout(() => {\r\n      console.log(`Executing scheduled reconnect attempt ${reconnectAttemptRef.current}`);\r\n      connectSocket();\r\n    }, delay);\r\n  }, [cleanupReconnectTimer]);\r\n  \r\n  // Connect socket\r\n  const connectSocket = useCallback(() => {\r\n    try {\r\n      // First, cleanup any existing socket\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n\r\n      setConnectionStatus('connecting');\r\n      \r\n      // Fix: Use the correct backend API URL with port 5000 instead of frontend port\r\n      const apiUrl = 'http://localhost:5000'; // Backend server runs on port 5000\r\n      \r\n      console.log('Connecting to socket at:', apiUrl);\r\n      \r\n      // Fix: More robust socket configuration with increased timeout\r\n      const socket = io(apiUrl, {\r\n        reconnection: true,\r\n        reconnectionAttempts: 10,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        timeout: 60000, // Increased timeout to 60 seconds\r\n        transports: ['websocket', 'polling'],\r\n        withCredentials: true,\r\n        forceNew: true,\r\n        auth: {\r\n          token: localStorage.getItem('token')\r\n        },\r\n        autoConnect: true // Ensure auto-connection is enabled\r\n      });\r\n      \r\n      socketRef.current = socket;\r\n      \r\n      // Connection event handlers\r\n      socket.on('connect', () => {\r\n        console.log('Socket connected successfully:', socket.id);\r\n        reconnectAttemptRef.current = 0;\r\n        setConnectionStatus('connected');\r\n        setError('');\r\n        \r\n        // Authenticate socket connection\r\n        if (user) {\r\n          socket.emit('authenticate', { userId: user._id });\r\n          console.log('Authentication sent for user:', user._id);\r\n        }\r\n      });\r\n      \r\n      socket.on('connect_error', (err) => {\r\n        console.error('Socket connection error:', err);\r\n        setConnectionStatus('error');\r\n        \r\n        // Special handling for timeout errors\r\n        if (err.message === 'timeout') {\r\n          setError(`Connection timed out. Server may be down or unreachable. Reconnecting...`);\r\n          console.log('Timeout detected, attempting immediate reconnect...');\r\n          // Reset reconnect attempts for timeouts to give more chances\r\n          reconnectAttemptRef.current = Math.max(0, reconnectAttemptRef.current - 2);\r\n        } else {\r\n          setError(`Connection error: ${err.message}. Reconnecting...`);\r\n        }\r\n        \r\n        scheduleReconnect();\r\n      });\r\n      \r\n      socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected. Reason:', reason);\r\n        \r\n        // If the server closed the connection, we should attempt reconnect\r\n        if (reason === 'io server disconnect' || reason === 'transport close') {\r\n          setConnectionStatus('disconnected');\r\n          scheduleReconnect();\r\n        } else {\r\n          // For other cases, socket.io will try to reconnect automatically\r\n          setConnectionStatus('disconnected');\r\n        }\r\n      });\r\n      \r\n      socket.on('reconnect', (attempt) => {\r\n        console.log(`Socket reconnected after ${attempt} attempts`);\r\n        reconnectAttemptRef.current = 0;\r\n        setConnectionStatus('connected');\r\n        setError('');\r\n        \r\n        // Re-authenticate after reconnection\r\n        if (user) {\r\n          socket.emit('authenticate', { userId: user._id });\r\n          \r\n          // Rejoin active chat if any\r\n          if (activeChat) {\r\n            socket.emit('join:project', activeChat);\r\n          }\r\n        }\r\n      });\r\n      \r\n      socket.on('reconnect_error', (err) => {\r\n        console.error('Socket reconnection error:', err);\r\n        setError(`Reconnection error: ${err.message}. Retrying...`);\r\n        scheduleReconnect();\r\n      });\r\n      \r\n      socket.on('reconnect_failed', () => {\r\n        console.log('Socket reconnection failed');\r\n        setConnectionStatus('error');\r\n        setError('Connection failed. Please use the reconnect button or refresh the page.');\r\n      });\r\n      \r\n      socket.on('error', (err) => {\r\n        console.error('Socket error:', err);\r\n        setError(`Socket error: ${err.message || 'Unknown error'}`);\r\n      });\r\n      \r\n      // Listen for online users updates\r\n      socket.on('users:online', (users) => {\r\n        console.log('Online users updated:', users);\r\n        setOnlineUsers(users);\r\n      });\r\n      \r\n      // Listen for new messages\r\n      socket.on('chat:message', (message) => {\r\n        console.log('Received message:', message);\r\n        setMessages(prevMessages => {\r\n          const chatId = message.projectId;\r\n          const updatedMessages = { ...prevMessages };\r\n          \r\n          if (!updatedMessages[chatId]) {\r\n            updatedMessages[chatId] = [];\r\n          }\r\n          \r\n          // Check if message already exists (avoid duplicates)\r\n          const messageExists = updatedMessages[chatId].some(m => m._id === message._id);\r\n          if (!messageExists) {\r\n            // Ensure the userId field is properly structured\r\n            const safeMessage = {\r\n              ...message,\r\n              userId: message.userId && typeof message.userId === 'object' \r\n                ? message.userId \r\n                : { \r\n                    _id: message.userId || user?._id,\r\n                    displayName: message.userName || 'Unknown User',\r\n                    photo: message.userAvatar || null\r\n                  }\r\n            };\r\n            \r\n            updatedMessages[chatId] = [...updatedMessages[chatId], safeMessage];\r\n          }\r\n          \r\n          return updatedMessages;\r\n        });\r\n        \r\n        // Update unread count if message is not from current user and not in active chat\r\n        if (message.userId?._id !== user?._id && activeChat !== message.projectId) {\r\n          setUnreadCounts(prev => ({\r\n            ...prev,\r\n            [message.projectId]: (prev[message.projectId] || 0) + 1\r\n          }));\r\n        }\r\n      });\r\n      \r\n      // Listen for message deletions\r\n      socket.on('chat:message:delete', ({ messageId, projectId }) => {\r\n        setMessages(prevMessages => {\r\n          const updatedMessages = { ...prevMessages };\r\n          \r\n          if (updatedMessages[projectId]) {\r\n            updatedMessages[projectId] = updatedMessages[projectId].filter(m => m._id !== messageId);\r\n          }\r\n          \r\n          return updatedMessages;\r\n        });\r\n      });\r\n      \r\n    } catch (err) {\r\n      console.error('Error setting up socket connection:', err);\r\n      setConnectionStatus('error');\r\n      setError('Failed to establish connection. Please try reconnecting.');\r\n      scheduleReconnect();\r\n    }\r\n  }, [user, activeChat, scheduleReconnect]);\r\n  \r\n  // Disconnect socket\r\n  const disconnectSocket = useCallback(() => {\r\n    const socket = socketRef.current;\r\n    if (socket) {\r\n      console.log('Cleaning up socket connection');\r\n      \r\n      // Remove all event listeners\r\n      socket.off('connect');\r\n      socket.off('connect_error');\r\n      socket.off('disconnect');\r\n      socket.off('reconnect');\r\n      socket.off('reconnect_error');\r\n      socket.off('reconnect_failed');\r\n      socket.off('error');\r\n      socket.off('chat:message');\r\n      socket.off('chat:message:delete');\r\n      socket.off('users:online');\r\n      \r\n      // Leave active chat room if any\r\n      if (activeChat) {\r\n        socket.emit('leave:project', activeChat);\r\n      }\r\n      \r\n      // Disconnect socket\r\n      socket.disconnect();\r\n      socketRef.current = null;\r\n    }\r\n  }, [activeChat]);\r\n  \r\n  // Join a chat room\r\n  const joinChatRoom = useCallback((chatId) => {\r\n    const socket = socketRef.current;\r\n    if (socket && chatId) {\r\n      console.log('Joining chat room:', chatId);\r\n      socket.emit('join:project', chatId);\r\n      setActiveChat(chatId);\r\n      \r\n      // Reset unread count for this chat\r\n      setUnreadCounts(prev => ({\r\n        ...prev,\r\n        [chatId]: 0\r\n      }));\r\n    } else if (!socket && chatId) {\r\n      // If no socket but trying to join a room, attempt reconnection\r\n      console.log('No active socket when trying to join room. Attempting reconnect...');\r\n      setActiveChat(chatId); // Set activeChat first so it can be rejoined after connection\r\n      reconnect();\r\n    }\r\n  }, [reconnect]);\r\n  \r\n  // Leave a chat room\r\n  const leaveChatRoom = useCallback((chatId) => {\r\n    const socket = socketRef.current;\r\n    if (socket && chatId) {\r\n      // Only leave the room if it's actually valid\r\n      if (typeof chatId === 'string' && chatId.trim() !== '') {\r\n        console.log('Leaving chat room:', chatId);\r\n        socket.emit('leave:project', chatId);\r\n        if (activeChat === chatId) {\r\n          setActiveChat(null);\r\n        }\r\n      }\r\n    }\r\n  }, [activeChat]);\r\n  \r\n  // Fetch messages for a specific chat\r\n  const fetchMessages = useCallback(async (chatId) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // If we already have messages for this chat, don't fetch again\r\n      if (messages[chatId] && messages[chatId].length > 0) {\r\n        return messages[chatId];\r\n      }\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setError('Authentication required. Please log in again.');\r\n        return [];\r\n      }\r\n      \r\n      const res = await axios.get(`/api/chat/${chatId}/messages`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        timeout: 10000 // 10 seconds timeout\r\n      });\r\n      \r\n      if (Array.isArray(res.data)) {\r\n        setMessages(prev => ({\r\n          ...prev,\r\n          [chatId]: res.data\r\n        }));\r\n        return res.data;\r\n      } else {\r\n        console.error('Unexpected message format:', res.data);\r\n        return [];\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching messages:', err);\r\n      if (err.code === 'ECONNABORTED') {\r\n        setError('Request timed out. Please check your connection and try again.');\r\n      } else if (err.response) {\r\n        setError(`Failed to load messages: ${err.response.data.message || err.response.statusText}`);\r\n      } else if (err.request) {\r\n        setError('Network error. Please check your connection and try again.');\r\n      } else {\r\n        setError('Failed to load messages. Please try again.');\r\n      }\r\n      return [];\r\n    }\r\n  }, [messages]);\r\n  \r\n  // Send a message\r\n  const sendMessage = useCallback(async (chatId, messageText) => {\r\n    try {\r\n      setError('');\r\n      \r\n      if (!messageText || messageText.trim() === '') {\r\n        return false;\r\n      }\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setError('Authentication required. Please log in again.');\r\n        return false;\r\n      }\r\n      \r\n      // Create optimistic message\r\n      const optimisticMessage = {\r\n        _id: `temp-${Date.now()}`,\r\n        projectId: chatId,\r\n        userId: {\r\n          _id: user._id,\r\n          displayName: user.displayName,\r\n          photo: user.photo\r\n        },\r\n        message: messageText,\r\n        createdAt: new Date().toISOString(),\r\n        isOptimistic: true\r\n      };\r\n      \r\n      // Add to messages immediately\r\n      setMessages(prev => {\r\n        const updatedMessages = { ...prev };\r\n        \r\n        if (!updatedMessages[chatId]) {\r\n          updatedMessages[chatId] = [];\r\n        }\r\n        \r\n        updatedMessages[chatId] = [...updatedMessages[chatId], optimisticMessage];\r\n        return updatedMessages;\r\n      });\r\n      \r\n      // Send to server\r\n      const response = await axios.post(`/api/chat/${chatId}/messages`, {\r\n        message: messageText,\r\n        attachments: []\r\n      }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        timeout: 10000\r\n      });\r\n      \r\n      // If successful, remove optimistic message\r\n      if (response.status === 201 || response.status === 200) {\r\n        setMessages(prev => {\r\n          const updatedMessages = { ...prev };\r\n          \r\n          if (updatedMessages[chatId]) {\r\n            updatedMessages[chatId] = updatedMessages[chatId].filter(m => m._id !== optimisticMessage._id);\r\n          }\r\n          \r\n          return updatedMessages;\r\n        });\r\n        // The real message will be added via socket.io\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (err) {\r\n      console.error('Error sending message:', err);\r\n      \r\n      // Remove optimistic message on error\r\n      setMessages(prev => {\r\n        const updatedMessages = { ...prev };\r\n        \r\n        if (updatedMessages[chatId]) {\r\n          updatedMessages[chatId] = updatedMessages[chatId].filter(m => !m.isOptimistic);\r\n        }\r\n        \r\n        return updatedMessages;\r\n      });\r\n      \r\n      if (err.response) {\r\n        setError(`Failed to send message: ${err.response.data.message || err.response.statusText}`);\r\n      } else if (err.request) {\r\n        setError('Network error. Please check your connection and try again.');\r\n      } else {\r\n        setError('Failed to send message. Please try again.');\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  }, [user]);\r\n  \r\n  // Delete a message\r\n  const deleteMessage = useCallback(async (chatId, messageId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setError('Authentication required. Please log in again.');\r\n        return false;\r\n      }\r\n      \r\n      // Find the message before trying to delete it\r\n      const msgToDelete = messages[chatId]?.find(m => m._id === messageId);\r\n      if (!msgToDelete) {\r\n        setError('Message not found');\r\n        return false;\r\n      }\r\n      \r\n      // Optimistically remove message\r\n      setMessages(prev => {\r\n        const updatedMessages = { ...prev };\r\n        \r\n        if (updatedMessages[chatId]) {\r\n          updatedMessages[chatId] = updatedMessages[chatId].filter(m => m._id !== messageId);\r\n        }\r\n        \r\n        return updatedMessages;\r\n      });\r\n      \r\n      await axios.delete(`/api/chat/${chatId}/messages/${messageId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deleting message:', err);\r\n      \r\n      // Add the message back if deletion failed\r\n      setMessages(prev => {\r\n        const updatedMessages = { ...prev };\r\n        const msgToDelete = messages[chatId]?.find(m => m._id === messageId);\r\n        \r\n        if (updatedMessages[chatId] && msgToDelete) {\r\n          updatedMessages[chatId] = [...updatedMessages[chatId], msgToDelete]\r\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n        }\r\n        \r\n        return updatedMessages;\r\n      });\r\n      \r\n      setError('Failed to delete message. Please try again.');\r\n      return false;\r\n    }\r\n  }, [messages]);\r\n  \r\n  // Total unread count\r\n  const totalUnreadCount = Object.values(unreadCounts).reduce((sum, count) => sum + count, 0);\r\n  \r\n  // Get chat messages\r\n  const getChatMessages = useCallback((chatId) => {\r\n    return messages[chatId] || [];\r\n  }, [messages]);\r\n  \r\n  // Mark chat as read\r\n  const markChatAsRead = useCallback((chatId) => {\r\n    setUnreadCounts(prev => ({\r\n      ...prev,\r\n      [chatId]: 0\r\n    }));\r\n  }, []);\r\n  \r\n  return (\r\n    <ChatContext.Provider value={{\r\n      messages,\r\n      activeChat,\r\n      connectionStatus,\r\n      error,\r\n      onlineUsers,\r\n      unreadCounts,\r\n      totalUnreadCount,\r\n      getChatMessages,\r\n      joinChatRoom,\r\n      leaveChatRoom,\r\n      sendMessage: user ? sendMessage : () => Promise.reject('User not authenticated'),\r\n      deleteMessage,\r\n      fetchMessages,\r\n      markChatAsRead,\r\n      isOnline: (userId) => onlineUsers.includes(userId),\r\n      reconnect // Exposing manual reconnect function\r\n    }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChatProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}