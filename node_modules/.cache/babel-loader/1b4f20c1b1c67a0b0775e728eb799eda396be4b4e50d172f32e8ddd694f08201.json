{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import{io}from'socket.io-client';import{AuthContext}from'../context/AuthContext';import NotificationToast from'./NotificationToast';import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const NotificationManager=()=>{const{user}=useContext(AuthContext);const[socket,setSocket]=useState(null);const[notifications,setNotifications]=useState([]);// Setup socket connection\nuseEffect(()=>{if(!user||!user._id)return;// Connect to socket\nconst newSocket=io(process.env.REACT_APP_API_URL||'http://localhost:5000');// Authenticate with user ID\nnewSocket.emit('authenticate',{userId:user._id});setSocket(newSocket);// Clean up socket on unmount\nreturn()=>{if(newSocket){newSocket.disconnect();}};},[user]);// Setup socket event listeners\nuseEffect(()=>{if(!socket)return;// Listen for project-related events\nsocket.on('project:created',data=>{if(data&&data.project){const notification={id:\"project-created-\".concat(Date.now()),type:'project_created',title:'New Project Created',message:\"A new project \\\"\".concat(data.project.name,\"\\\" has been created\"),projectId:data.project._id,linkText:'View Project',timestamp:new Date()};addNotification(notification);}});socket.on('project:updated',data=>{if(data&&data.project){const notification={id:\"project-updated-\".concat(Date.now()),type:'project_updated',title:'Project Updated',message:\"Project \\\"\".concat(data.project.name,\"\\\" has been updated\"),projectId:data.project._id,linkText:'View Project',timestamp:new Date()};addNotification(notification);}});// Listen for task-related events\nsocket.on('task:created',data=>{if(data&&data.task){const notification={id:\"task-created-\".concat(Date.now()),type:'task_created',title:'New Task Added',message:\"A new task \\\"\".concat(data.task.title,\"\\\" has been created\"),taskId:data.task._id,projectId:data.task.projectId||data.task.project,linkText:'View Task',timestamp:new Date()};addNotification(notification);}});socket.on('task:completed',data=>{if(data&&data.task){const notification={id:\"task-completed-\".concat(Date.now()),type:'task_completed',title:'Task Completed',message:\"Task \\\"\".concat(data.task.title,\"\\\" has been completed\"),taskId:data.task._id,projectId:data.task.projectId||data.task.project,linkText:'View Task',timestamp:new Date()};addNotification(notification);}});socket.on('task:updated',data=>{if(data&&data.task){const notification={id:\"task-updated-\".concat(Date.now()),type:'task_updated',title:'Task Updated',message:\"Task \\\"\".concat(data.task.title,\"\\\" has been updated\"),taskId:data.task._id,projectId:data.task.projectId||data.task.project,linkText:'View Task',timestamp:new Date()};addNotification(notification);}});// Clean up event listeners\nreturn()=>{socket.off('project:created');socket.off('project:updated');socket.off('task:created');socket.off('task:completed');socket.off('task:updated');};},[socket]);// Add a new notification\nconst addNotification=notification=>{setNotifications(prev=>[notification,...prev].slice(0,5));// Keep only 5 most recent\n};// Remove a notification\nconst removeNotification=id=>{setNotifications(prev=>prev.filter(notification=>notification.id!==id));};return/*#__PURE__*/_jsx(_Fragment,{children:notifications.map(notification=>/*#__PURE__*/_jsx(NotificationToast,{notification:notification,onClose:()=>removeNotification(notification.id)},notification.id))});};export default NotificationManager;","map":{"version":3,"names":["React","useState","useEffect","useContext","io","AuthContext","NotificationToast","jsx","_jsx","Fragment","_Fragment","NotificationManager","user","socket","setSocket","notifications","setNotifications","_id","newSocket","process","env","REACT_APP_API_URL","emit","userId","disconnect","on","data","project","notification","id","concat","Date","now","type","title","message","name","projectId","linkText","timestamp","addNotification","task","taskId","off","prev","slice","removeNotification","filter","children","map","onClose"],"sources":["C:/Users/DELL/OneDrive/Desktop/collabeaseproject/collabeasesorce/collabease/client/src/components/NotificationManager.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport NotificationToast from './NotificationToast';\r\n\r\nconst NotificationManager = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const [socket, setSocket] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  \r\n  // Setup socket connection\r\n  useEffect(() => {\r\n    if (!user || !user._id) return;\r\n    \r\n    // Connect to socket\r\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5000');\r\n    \r\n    // Authenticate with user ID\r\n    newSocket.emit('authenticate', { userId: user._id });\r\n    \r\n    setSocket(newSocket);\r\n    \r\n    // Clean up socket on unmount\r\n    return () => {\r\n      if (newSocket) {\r\n        newSocket.disconnect();\r\n      }\r\n    };\r\n  }, [user]);\r\n  \r\n  // Setup socket event listeners\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    \r\n    // Listen for project-related events\r\n    socket.on('project:created', (data) => {\r\n      if (data && data.project) {\r\n        const notification = {\r\n          id: `project-created-${Date.now()}`,\r\n          type: 'project_created',\r\n          title: 'New Project Created',\r\n          message: `A new project \"${data.project.name}\" has been created`,\r\n          projectId: data.project._id,\r\n          linkText: 'View Project',\r\n          timestamp: new Date()\r\n        };\r\n        \r\n        addNotification(notification);\r\n      }\r\n    });\r\n    \r\n    socket.on('project:updated', (data) => {\r\n      if (data && data.project) {\r\n        const notification = {\r\n          id: `project-updated-${Date.now()}`,\r\n          type: 'project_updated',\r\n          title: 'Project Updated',\r\n          message: `Project \"${data.project.name}\" has been updated`,\r\n          projectId: data.project._id,\r\n          linkText: 'View Project',\r\n          timestamp: new Date()\r\n        };\r\n        \r\n        addNotification(notification);\r\n      }\r\n    });\r\n    \r\n    // Listen for task-related events\r\n    socket.on('task:created', (data) => {\r\n      if (data && data.task) {\r\n        const notification = {\r\n          id: `task-created-${Date.now()}`,\r\n          type: 'task_created',\r\n          title: 'New Task Added',\r\n          message: `A new task \"${data.task.title}\" has been created`,\r\n          taskId: data.task._id,\r\n          projectId: data.task.projectId || data.task.project,\r\n          linkText: 'View Task',\r\n          timestamp: new Date()\r\n        };\r\n        \r\n        addNotification(notification);\r\n      }\r\n    });\r\n    \r\n    socket.on('task:completed', (data) => {\r\n      if (data && data.task) {\r\n        const notification = {\r\n          id: `task-completed-${Date.now()}`,\r\n          type: 'task_completed',\r\n          title: 'Task Completed',\r\n          message: `Task \"${data.task.title}\" has been completed`,\r\n          taskId: data.task._id,\r\n          projectId: data.task.projectId || data.task.project,\r\n          linkText: 'View Task',\r\n          timestamp: new Date()\r\n        };\r\n        \r\n        addNotification(notification);\r\n      }\r\n    });\r\n    \r\n    socket.on('task:updated', (data) => {\r\n      if (data && data.task) {\r\n        const notification = {\r\n          id: `task-updated-${Date.now()}`,\r\n          type: 'task_updated',\r\n          title: 'Task Updated',\r\n          message: `Task \"${data.task.title}\" has been updated`,\r\n          taskId: data.task._id,\r\n          projectId: data.task.projectId || data.task.project,\r\n          linkText: 'View Task',\r\n          timestamp: new Date()\r\n        };\r\n        \r\n        addNotification(notification);\r\n      }\r\n    });\r\n    \r\n    // Clean up event listeners\r\n    return () => {\r\n      socket.off('project:created');\r\n      socket.off('project:updated');\r\n      socket.off('task:created');\r\n      socket.off('task:completed');\r\n      socket.off('task:updated');\r\n    };\r\n  }, [socket]);\r\n  \r\n  // Add a new notification\r\n  const addNotification = (notification) => {\r\n    setNotifications(prev => [notification, ...prev].slice(0, 5)); // Keep only 5 most recent\r\n  };\r\n  \r\n  // Remove a notification\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      {notifications.map(notification => (\r\n        <NotificationToast\r\n          key={notification.id}\r\n          notification={notification}\r\n          onClose={() => removeNotification(notification.id)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotificationManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}