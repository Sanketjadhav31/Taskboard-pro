{"ast":null,"code":"import React,{createContext,useState,useEffect,useCallback}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export const ThemeContext=/*#__PURE__*/createContext();export const ThemeProvider=_ref=>{let{children}=_ref;// Use lazy initialization to only run this once\nconst[darkMode,setDarkMode]=useState(()=>{try{// Check local storage for user's preferred theme\nconst savedTheme=localStorage.getItem('darkMode');// If there's a saved preference, use it\nif(savedTheme!==null){return savedTheme==='true';}// Otherwise check if the user's system prefers dark mode\nreturn window.matchMedia('(prefers-color-scheme: dark)').matches;}catch(error){console.error('Error getting theme preference:',error);return false;// Default to light mode if there's an error\n}});// Use useCallback to prevent recreating this function on each render\nconst toggleTheme=useCallback(()=>{setDarkMode(prevMode=>{try{const newMode=!prevMode;localStorage.setItem('darkMode',String(newMode));return newMode;}catch(error){console.error('Error saving theme preference:',error);return!prevMode;// Still toggle the theme even if saving fails\n}});},[]);// Apply theme effect - only runs when darkMode changes\nuseEffect(()=>{try{// Apply the theme to the document\nif(darkMode){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}}catch(error){console.error('Error applying theme:',error);}},[darkMode]);// Create a memoized context value to prevent unnecessary re-renders\nconst contextValue=React.useMemo(()=>({darkMode,toggleTheme}),[darkMode,toggleTheme]);return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:contextValue,children:children});};export default ThemeProvider;","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","darkMode","setDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","error","console","toggleTheme","prevMode","newMode","setItem","String","document","documentElement","classList","add","remove","contextValue","useMemo","Provider","value"],"sources":["C:/Users/DELL/OneDrive/Desktop/collabeaseproject/collabeasesorce/collabease/client/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // Use lazy initialization to only run this once\n  const [darkMode, setDarkMode] = useState(() => {\n    try {\n      // Check local storage for user's preferred theme\n      const savedTheme = localStorage.getItem('darkMode');\n      \n      // If there's a saved preference, use it\n      if (savedTheme !== null) {\n        return savedTheme === 'true';\n      }\n      \n      // Otherwise check if the user's system prefers dark mode\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    } catch (error) {\n      console.error('Error getting theme preference:', error);\n      return false; // Default to light mode if there's an error\n    }\n  });\n\n  // Use useCallback to prevent recreating this function on each render\n  const toggleTheme = useCallback(() => {\n    setDarkMode(prevMode => {\n      try {\n        const newMode = !prevMode;\n        localStorage.setItem('darkMode', String(newMode));\n        return newMode;\n      } catch (error) {\n        console.error('Error saving theme preference:', error);\n        return !prevMode; // Still toggle the theme even if saving fails\n      }\n    });\n  }, []);\n\n  // Apply theme effect - only runs when darkMode changes\n  useEffect(() => {\n    try {\n      // Apply the theme to the document\n      if (darkMode) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    } catch (error) {\n      console.error('Error applying theme:', error);\n    }\n  }, [darkMode]);\n\n  // Create a memoized context value to prevent unnecessary re-renders\n  const contextValue = React.useMemo(() => ({ \n    darkMode, \n    toggleTheme \n  }), [darkMode, toggleTheme]);\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE/E,MAAO,MAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAE3C,MAAO,MAAM,CAAAO,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC;AACA,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,IAAM,CAC7C,GAAI,CACF;AACA,KAAM,CAAAW,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAEnD;AACA,GAAIF,UAAU,GAAK,IAAI,CAAE,CACvB,MAAO,CAAAA,UAAU,GAAK,MAAM,CAC9B,CAEA;AACA,MAAO,CAAAG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAClE,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,MAAO,MAAK,CAAE;AAChB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAE,WAAW,CAAGjB,WAAW,CAAC,IAAM,CACpCQ,WAAW,CAACU,QAAQ,EAAI,CACtB,GAAI,CACF,KAAM,CAAAC,OAAO,CAAG,CAACD,QAAQ,CACzBR,YAAY,CAACU,OAAO,CAAC,UAAU,CAAEC,MAAM,CAACF,OAAO,CAAC,CAAC,CACjD,MAAO,CAAAA,OAAO,CAChB,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,CAACG,QAAQ,CAAE;AACpB,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN;AACAnB,SAAS,CAAC,IAAM,CACd,GAAI,CACF;AACA,GAAIQ,QAAQ,CAAE,CACZe,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAChD,CAAC,IAAM,CACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC,CACnD,CACF,CAAE,MAAOX,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC/C,CACF,CAAC,CAAE,CAACR,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAoB,YAAY,CAAG/B,KAAK,CAACgC,OAAO,CAAC,KAAO,CACxCrB,QAAQ,CACRU,WACF,CAAC,CAAC,CAAE,CAACV,QAAQ,CAAEU,WAAW,CAAC,CAAC,CAE5B,mBACEf,IAAA,CAACC,YAAY,CAAC0B,QAAQ,EAACC,KAAK,CAAEH,YAAa,CAAArB,QAAA,CACxCA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,cAAe,CAAAF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}